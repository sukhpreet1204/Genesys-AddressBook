{"ast":null,"code":"import checkYearValidation from \"./checkYearValidation\";\n\nconst formValidation = (name, contactNo, emailId, address, university, degree, startYear, endYear, institution, workStartYear, workEndYear, title) => {\n  const nameErr = {};\n  const contactNoErr = {};\n  const emailIdErr = {};\n  const addressErr = {};\n  const universityErr = {};\n  const degreeErr = {};\n  const institutionErr = {};\n  const titleErr = {};\n  const educationYearErr = {};\n  const experienceYearErr = {};\n  let isValid = true;\n\n  if (!name) {\n    nameErr.mandatory = \"Name is required\";\n    isValid = false;\n  }\n\n  if (name.length < 3) {\n    nameErr.nameShort = \"Name is too short\";\n    isValid = false;\n  }\n\n  if (!contactNo) {\n    contactNoErr.mandatory = \"Contact number is required\";\n    isValid = false;\n  } else {\n    var numberPattern = /^\\d+$/;\n\n    if (!numberPattern.test(contactNo)) {\n      contactNoErr.invalid = \"Invalid Contact Number\";\n      isValid = false;\n    }\n  }\n\n  if (!emailId) {\n    emailIdErr.mandatory = \"Email ID is required\";\n    isValid = false;\n  } else if (!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(emailId)) {\n    emailIdErr.invalid = \"Invalid email id.\";\n    isValid = false;\n  }\n\n  if (!address) {\n    addressErr.mandatory = \"Address is required\";\n    isValid = false;\n  }\n\n  if (address.length < 3) {\n    addressErr.addressShort = \"Address is too short\";\n    isValid = false;\n  }\n\n  if (!university) {\n    universityErr.mandatory = \"University is required\";\n    isValid = false;\n  }\n\n  if (university.length < 3) {\n    universityErr.universityShort = \"University Name is too short\";\n    isValid = false;\n  }\n\n  if (!checkYearValidation(startYear, endYear)) {\n    educationYearErr.invalidYear = \"Start Year should be less than End Year\";\n    isValid = false;\n  }\n\n  if (!degree) {\n    degreeErr.mandatory = \"Degree is required\";\n    isValid = false;\n  }\n\n  if (!institution) {\n    institutionErr.mandatory = \"Institution is required\";\n    isValid = false;\n  }\n\n  if (institution.length < 3) {\n    institutionErr.institutionShort = \"Institution Name is too short\";\n    isValid = false;\n  }\n\n  if (!checkYearValidation(workStartYear, workEndYear)) {\n    experienceYearErr.invalidYear = \"Start Year should be less than End Year\";\n    isValid = false;\n  }\n\n  if (!title) {\n    titleErr.mandatory = \"Title is required\";\n    isValid = false;\n  }\n\n  if (title.length < 3) {\n    titleErr.titleShort = \"Title is too short\";\n    isValid = false;\n  }\n\n  return {\n    nameErr,\n    contactNoErr,\n    emailIdErr,\n    addressErr,\n    universityErr,\n    degreeErr,\n    institutionErr,\n    titleErr,\n    educationYearErr,\n    experienceYearErr,\n    isValid\n  };\n};\n\nexport default formValidation;","map":{"version":3,"sources":["/Users/supreetsingh/address-book/src/utils/formValidation.js"],"names":["checkYearValidation","formValidation","name","contactNo","emailId","address","university","degree","startYear","endYear","institution","workStartYear","workEndYear","title","nameErr","contactNoErr","emailIdErr","addressErr","universityErr","degreeErr","institutionErr","titleErr","educationYearErr","experienceYearErr","isValid","mandatory","length","nameShort","numberPattern","test","invalid","addressShort","universityShort","invalidYear","institutionShort","titleShort"],"mappings":"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","sourcesContent":["import checkYearValidation from \"./checkYearValidation\"\nconst formValidation = (name, contactNo, emailId, address, university, degree, startYear, endYear, institution, workStartYear, workEndYear, title )=> {\n    const nameErr = {};\n    const contactNoErr = {};\n    const emailIdErr = {};\n    const addressErr = {};\n    const universityErr = {};\n    const degreeErr = {};\n    const institutionErr = {};\n    const titleErr = {};\n    const educationYearErr = {};\n    const experienceYearErr = {};\n    let isValid = true;\n\n    if(!name){\n        nameErr.mandatory = \"Name is required\";\n        isValid = false;\n    }\n    if(name.length < 3){\n        nameErr.nameShort = \"Name is too short\";\n        isValid = false;\n    }\n\n    if(!contactNo){\n        contactNoErr.mandatory = \"Contact number is required\";\n        isValid = false;\n    }\n    else{  \n        var numberPattern = /^\\d+$/;  \n        if (!numberPattern.test(contactNo)) {     \n            contactNoErr.invalid = \"Invalid Contact Number\"; \n            isValid = false;  \n        }    \n\n    }\n\n    if(!emailId){\n        emailIdErr.mandatory = \"Email ID is required\";\n        isValid = false;\n    }\n    else if (!(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(emailId))) {       \n        emailIdErr.invalid = \"Invalid email id.\";  \n        isValid = false;  \n    } \n    \n    if(!address){\n        addressErr.mandatory = \"Address is required\";\n        isValid = false;\n    }\n    if(address.length < 3){\n        addressErr.addressShort = \"Address is too short\";\n        isValid = false;\n    }\n\n    if(!university){\n        universityErr.mandatory = \"University is required\";\n        isValid = false;\n    }\n    if(university.length < 3){\n        universityErr.universityShort = \"University Name is too short\";\n        isValid = false;\n    }\n\n    if(!checkYearValidation(startYear, endYear)){\n        educationYearErr.invalidYear = \"Start Year should be less than End Year\";\n        isValid = false;\n    }\n\n    if(!degree){\n        degreeErr.mandatory = \"Degree is required\";\n        isValid = false;\n    }\n\n    if(!institution){\n        institutionErr.mandatory = \"Institution is required\";\n        isValid = false;\n    }\n    if(institution.length < 3){\n        institutionErr.institutionShort = \"Institution Name is too short\";\n        isValid = false;\n    }\n\n    if(!checkYearValidation(workStartYear, workEndYear)){\n        experienceYearErr.invalidYear = \"Start Year should be less than End Year\";\n        isValid = false;\n    }\n\n    if(!title){\n        titleErr.mandatory = \"Title is required\";\n        isValid = false;\n    }\n    if(title.length < 3){\n        titleErr.titleShort = \"Title is too short\";\n        isValid = false;\n    }\n    return {\n        nameErr,\n        contactNoErr,\n        emailIdErr,\n        addressErr,\n        universityErr,\n        degreeErr,\n        institutionErr,\n        titleErr,\n        educationYearErr,\n        experienceYearErr,\n       isValid \n    };     \n}\n\nexport default formValidation;"]},"metadata":{},"sourceType":"module"}