{"ast":null,"code":"export default formValidation = () => {\n  const nameErr = {};\n  const contactNoErr = {};\n  const emailIdErr = {};\n  const addressErr = {};\n  const universityErr = {};\n  const degreeErr = {};\n  const institutionErr = {};\n  const titleErr = {};\n  const yearErr = {};\n  let isValid = true;\n\n  if (!name) {\n    nameErr.mandatory = \"Name is required\";\n    isValid = false;\n  }\n\n  if (name.length < 3) {\n    nameErr.nameShort = \"Name is too short\";\n    isValid = false;\n  }\n\n  if (!contactNo) {\n    contactNoErr.mandatory = \"Contact number is required\";\n    isValid = false;\n  } else {\n    var numberPattern = /^\\d{10}$/;\n\n    if (!numberPattern.test(contactNo)) {\n      contactNoErr.invalid = \"Invalid Contact Number\";\n      isValid = false;\n    }\n  }\n\n  if (!emailId) {\n    emailIdErr.mandatory = \"Email ID is required\";\n    isValid = false;\n  } else if (!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(emailId)) {\n    emailIdErr.invalid = \"Invalid email id.\";\n    isValid = false;\n  }\n\n  if (!address) {\n    addressErr.mandatory = \"Address is required\";\n    isValid = false;\n  }\n\n  if (address.length < 3) {\n    addressErr.addressShort = \"Address is too short\";\n    isValid = false;\n  }\n\n  if (!university) {\n    universityErr.mandatory = \"University is required\";\n    isValid = false;\n  }\n\n  if (university.length < 3) {\n    universityErr.universityShort = \"University Name is too short\";\n    isValid = false;\n  }\n\n  if (!checkYearValidation(startYear, endYear)) {\n    yearErr.invalidYear = \"Start Year should be less than End Year\";\n    isValid = false;\n  }\n\n  if (!degree) {\n    degreeErr.mandatory = \"Degree is required\";\n    isValid = false;\n  }\n\n  if (!institution) {\n    institutionErr.mandatory = \"Institution is required\";\n    isValid = false;\n  }\n\n  if (institution.length < 3) {\n    institutionErr.institutionShort = \"Institution Name is too short\";\n    isValid = false;\n  }\n\n  if (!checkYearValidation(workStartYear, workEndYear)) {\n    yearErr.invalidYear = \"Start Year should be less than End Year\";\n    isValid = false;\n  }\n\n  if (!title) {\n    titleErr.mandatory = \"Title is required\";\n    isValid = false;\n  }\n\n  if (title.length < 3) {\n    titleErr.titleShort = \"Title is too short\";\n    isValid = false;\n  }\n\n  setNameErr(nameErr);\n  setContactNoErr(contactNoErr);\n  setEmailIdErr(emailIdErr);\n  setAddressErr(addressErr);\n  setUniversityErr(universityErr);\n  setDegreeErr(degreeErr);\n  setInstitutionErr(institutionErr);\n  setTitleErr(titleErr);\n  setYearErr(yearErr);\n  return isValid;\n};\n\nconst checkYearValidation = (startYear, endYear) => {\n  if (startYear < endYear) return true;else return false;\n};","map":{"version":3,"sources":["/Users/supreetsingh/address-book/src/utils/formValidation.js"],"names":["formValidation","nameErr","contactNoErr","emailIdErr","addressErr","universityErr","degreeErr","institutionErr","titleErr","yearErr","isValid","name","mandatory","length","nameShort","contactNo","numberPattern","test","invalid","emailId","address","addressShort","university","universityShort","checkYearValidation","startYear","endYear","invalidYear","degree","institution","institutionShort","workStartYear","workEndYear","title","titleShort","setNameErr","setContactNoErr","setEmailIdErr","setAddressErr","setUniversityErr","setDegreeErr","setInstitutionErr","setTitleErr","setYearErr"],"mappings":"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","sourcesContent":["export default formValidation = () => {\n    const nameErr = {};\n        const contactNoErr = {};\n        const emailIdErr = {};\n        const addressErr = {};\n        const universityErr = {};\n        const degreeErr = {};\n        const institutionErr = {};\n        const titleErr = {};\n        const yearErr = {};\n          let isValid = true;\n\n        if(!name){\n            nameErr.mandatory = \"Name is required\";\n            isValid = false;\n        }\n        if(name.length < 3){\n            nameErr.nameShort = \"Name is too short\";\n            isValid = false;\n        }\n\n        if(!contactNo){\n            contactNoErr.mandatory = \"Contact number is required\";\n            isValid = false;\n        }\n        else{  \n            var numberPattern = /^\\d{10}$/;  \n            if (!numberPattern.test(contactNo)) {     \n                contactNoErr.invalid = \"Invalid Contact Number\"; \n                isValid = false;  \n            }    \n\n        }\n\n        if(!emailId){\n            emailIdErr.mandatory = \"Email ID is required\";\n            isValid = false;\n        }\n        else if (!(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(emailId))) {       \n            emailIdErr.invalid = \"Invalid email id.\";  \n            isValid = false;  \n        } \n        \n        if(!address){\n            addressErr.mandatory = \"Address is required\";\n            isValid = false;\n        }\n        if(address.length < 3){\n            addressErr.addressShort = \"Address is too short\";\n            isValid = false;\n        }\n\n        if(!university){\n            universityErr.mandatory = \"University is required\";\n            isValid = false;\n        }\n        if(university.length < 3){\n            universityErr.universityShort = \"University Name is too short\";\n            isValid = false;\n        }\n\n        if(!checkYearValidation(startYear, endYear)){\n            yearErr.invalidYear = \"Start Year should be less than End Year\";\n            isValid = false;\n        }\n\n        if(!degree){\n            degreeErr.mandatory = \"Degree is required\";\n            isValid = false;\n        }\n\n        if(!institution){\n            institutionErr.mandatory = \"Institution is required\";\n            isValid = false;\n        }\n        if(institution.length < 3){\n            institutionErr.institutionShort = \"Institution Name is too short\";\n            isValid = false;\n        }\n\n        if(!checkYearValidation(workStartYear, workEndYear)){\n            yearErr.invalidYear = \"Start Year should be less than End Year\";\n            isValid = false;\n        }\n\n        if(!title){\n            titleErr.mandatory = \"Title is required\";\n            isValid = false;\n        }\n        if(title.length < 3){\n            titleErr.titleShort = \"Title is too short\";\n            isValid = false;\n        }\n\n        setNameErr(nameErr);\n        setContactNoErr(contactNoErr);\n        setEmailIdErr(emailIdErr);\n        setAddressErr(addressErr);\n        setUniversityErr(universityErr);\n        setDegreeErr(degreeErr);\n        setInstitutionErr(institutionErr);\n        setTitleErr(titleErr);\n        setYearErr(yearErr);\n\n        return isValid;\n}\n\nconst checkYearValidation = (startYear, endYear) => {\n    if(startYear<endYear) return true;\n    else return false;\n}"]},"metadata":{},"sourceType":"module"}