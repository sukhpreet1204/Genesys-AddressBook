{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  let urlType = url.split(\"/\").pop();\n  console.log(\"urlType\", urlType);\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCtrl = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCtrl.signal\n      }).then(res => {\n        if (!res.ok) {\n          throw Error('could not fetch the data for that resource');\n        }\n\n        return res.json();\n      }).then(data => {\n        console.log(\"data abc\", data);\n\n        if (urlType === \"people\") {\n          console.log(\"print here\");\n          data.sort((a, b) => {\n            if (a.name > b.name) return 1;else {\n              return -1;\n            }\n          });\n        } // data.sort((a,b) => Number(a.id)- Number(b.id))\n\n\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        if (err.name === \"AbortError\") {\n          console.log('fetch aborted');\n        } else {\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 1000);\n    return () => abortCtrl.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/supreetsingh/address-book/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","urlType","split","pop","console","log","data","setData","isPending","setIsPending","error","setError","abortCtrl","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","sort","a","b","name","catch","err","message","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,MAAIC,OAAO,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,EAAeC,GAAf,EAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,OAAvB;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACjBC,MAAAA,KAAK,CAACf,GAAD,EAAM;AAAEgB,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAApB,OAAN,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,YAAG,CAACA,GAAG,CAACC,EAAR,EAAW;AACP,gBAAMC,KAAK,CAAC,4CAAD,CAAX;AACH;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,OANL,EAOKJ,IAPL,CAOUX,IAAI,IAAI;AACVF,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,IAAxB;;AACA,YAAGL,OAAO,KAAG,QAAb,EAAsB;AAClBG,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAC,UAAAA,IAAI,CAACgB,IAAL,CAAU,CAACC,CAAD,EAAGC,CAAH,KAAQ;AACd,gBAAGD,CAAC,CAACE,IAAF,GAAOD,CAAC,CAACC,IAAZ,EACA,OAAO,CAAP,CADA,KAEI;AACA,qBAAO,CAAC,CAAR;AACH;AACJ,WAND;AAOH,SAXS,CAYV;;;AACAlB,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAvBL,EAwBKe,KAxBL,CAwBWC,GAAG,IAAI;AACV,YAAGA,GAAG,CAACF,IAAJ,KAAa,YAAhB,EAA6B;AACzBrB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,SAFD,MAGI;AACAI,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAL,CAAR;AACH;AACJ,OAhCL;AAiCC,KAlCS,EAkCP,IAlCO,CAAV;AAmCK,WAAO,MAAMhB,SAAS,CAACiB,KAAV,EAAb;AAER,GAxCQ,EAwCN,CAAC7B,GAAD,CAxCM,CAAT;AA0CA,SAAO;AAAEM,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAlDD;;GAAMX,Q;;AAoDN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    let urlType = url.split(\"/\").pop()\n    console.log(\"urlType\", urlType)\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const abortCtrl = new AbortController();\n\n        setTimeout(() => {\n        fetch(url, { signal: abortCtrl.signal })\n            .then(res => {\n                if(!res.ok){\n                    throw Error('could not fetch the data for that resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                console.log(\"data abc\", data)\n                if(urlType===\"people\"){\n                    console.log(\"print here\")\n                    data.sort((a,b)=> {\n                        if(a.name>b.name)\n                        return 1;\n                        else{\n                            return -1;\n                        }\n                    })\n                }\n                // data.sort((a,b) => Number(a.id)- Number(b.id))\n                setData(data);\n                setIsPending(false);\n                setError(null);\n            })\n            .catch(err => {\n                if(err.name === \"AbortError\"){\n                    console.log('fetch aborted');\n                }\n                else{\n                    setIsPending(false);\n                    setError(err.message);\n                }     \n            })\n        }, 1000);\n             return () => abortCtrl.abort();\n\n    }, [url]);\n\n    return { data, isPending, error }\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}