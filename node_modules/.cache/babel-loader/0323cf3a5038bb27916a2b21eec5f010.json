{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\"; // const useFetchData = async(url) => {\n//     console.log(\"url\", url)\n//     let urlType = url.split(\"/\").pop();\n//     let responseObj = {}\n//     const abortCtrl = new AbortController();\n//     await fetch(url,{ signal: abortCtrl.signal } )\n//      .then((res)=> {\n//         if(!res.ok){\n//             throw Error('could not fetch the data for that resource');\n//         }\n//         return res.json();\n//     }).then((data)=> {\n//         if(urlType===\"people\"){\n//             data.sort((a,b)=> {\n//                 if(a.name>b.name)\n//                     return 1;\n//                 else{\n//                     return -1;\n//                 }\n//             })\n//             responseObj= {data, isPending:false, error:null}\n//         }\n//     }).catch((err)=> {\n//         responseObj={\n//             isPending: false,\n//             error: err.message\n//         }\n//     })\n//     console.log(\"responseObj\", responseObj)\n//     return responseObj;\n// }\n// export default useFetchData;\n\nconst useFetch = url => {\n  _s();\n\n  console.log(\"url\", url);\n  let urlType = url.split(\"/\").pop();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCtrl = new AbortController();\n    fetch(url, {\n      signal: abortCtrl.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw Error('could not fetch the data for that resource');\n      }\n\n      return res.json();\n    }).then(data => {\n      // if(urlType===\"people\"){\n      //     data.sort((a,b)=> {\n      //         if(a.name>b.name)\n      //         return 1;\n      //         else{\n      //             return -1;\n      //         }\n      //     })\n      // }\n      setData(data);\n      setIsPending(false);\n      setError(null);\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log('fetch aborted');\n      } else {\n        setIsPending(false);\n        setError(err.message);\n      }\n    });\n    return () => abortCtrl.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/supreetsingh/address-book/src/api/useFetch.js"],"names":["useEffect","useState","useFetch","url","console","log","urlType","split","pop","data","setData","isPending","setIsPending","error","setError","abortCtrl","AbortController","fetch","signal","then","res","ok","Error","json","catch","err","name","message","abort"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA,MAAIG,OAAO,GAAGH,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAeC,GAAf,EAAd;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAGAC,IAAAA,KAAK,CAACd,GAAD,EAAM;AAAEe,MAAAA,MAAM,EAAEH,SAAS,CAACG;AAApB,KAAN,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,UAAG,CAACA,GAAG,CAACC,EAAR,EAAW;AACP,cAAMC,KAAK,CAAC,4CAAD,CAAX;AACH;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,KANL,EAOKJ,IAPL,CAOUV,IAAI,IAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KArBL,EAsBKU,KAtBL,CAsBWC,GAAG,IAAI;AACV,UAAGA,GAAG,CAACC,IAAJ,KAAa,YAAhB,EAA6B;AACzBtB,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,OAFD,MAGI;AACAO,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAACW,GAAG,CAACE,OAAL,CAAR;AACH;AACJ,KA9BL;AAgCK,WAAO,MAAMZ,SAAS,CAACa,KAAV,EAAb;AAER,GAtCQ,EAsCN,CAACzB,GAAD,CAtCM,CAAT;AAwCA,SAAO;AAAEM,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAhDD;;GAAMX,Q;;AAkDN,eAAeA,QAAf","sourcesContent":["import {useEffect, useState} from \"react\";\n\n// const useFetchData = async(url) => {\n//     console.log(\"url\", url)\n//     let urlType = url.split(\"/\").pop();\n//     let responseObj = {}\n//     const abortCtrl = new AbortController();\n\n//     await fetch(url,{ signal: abortCtrl.signal } )\n//      .then((res)=> {\n//         if(!res.ok){\n//             throw Error('could not fetch the data for that resource');\n//         }\n//         return res.json();\n//     }).then((data)=> {\n//         if(urlType===\"people\"){\n//             data.sort((a,b)=> {\n//                 if(a.name>b.name)\n//                     return 1;\n//                 else{\n//                     return -1;\n//                 }\n//             })\n//             responseObj= {data, isPending:false, error:null}\n//         }\n//     }).catch((err)=> {\n//         responseObj={\n//             isPending: false,\n//             error: err.message\n//         }\n//     })\n\n\n//     console.log(\"responseObj\", responseObj)\n//     return responseObj;\n// }\n\n// export default useFetchData;\n\nconst useFetch = (url) => {\n    console.log(\"url\", url)\n    let urlType = url.split(\"/\").pop()\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const abortCtrl = new AbortController();\n\n        \n        fetch(url, { signal: abortCtrl.signal })\n            .then(res => {\n                if(!res.ok){\n                    throw Error('could not fetch the data for that resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                // if(urlType===\"people\"){\n                //     data.sort((a,b)=> {\n                //         if(a.name>b.name)\n                //         return 1;\n                //         else{\n                //             return -1;\n                //         }\n                //     })\n                // }\n                \n                setData(data);\n                setIsPending(false);\n                setError(null);\n            })\n            .catch(err => {\n                if(err.name === \"AbortError\"){\n                    console.log('fetch aborted');\n                }\n                else{\n                    setIsPending(false);\n                    setError(err.message);\n                }     \n            })\n        \n             return () => abortCtrl.abort();\n\n    }, [url]);\n\n    return { data, isPending, error }\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}